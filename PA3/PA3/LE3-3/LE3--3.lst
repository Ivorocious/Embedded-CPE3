

Microchip Technology PIC LITE Macro Assembler V1.33 build 59893 
                                                                                               Wed Feb 19 21:56:59 2025

Microchip Technology Omniscient Code Generator (Lite mode) build 59893
     1                           	processor	16F877A
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	text0,local,class=CODE,merge=1,delta=2
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bitbssCOMMON,global,bit,class=COMMON,space=1,delta=1
     7                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     8                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
     9                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	maintext,global,class=CODE,split=1,delta=2
    11                           	psect	text1,local,class=CODE,merge=1,delta=2
    12                           	psect	text2,local,class=CODE,merge=1,delta=2
    13                           	psect	intentry,global,class=CODE,delta=2
    14                           	dabs	1,0x7E,2
    15  0000                     	;# 
    16  0001                     	;# 
    17  0002                     	;# 
    18  0003                     	;# 
    19  0004                     	;# 
    20  0005                     	;# 
    21  0006                     	;# 
    22  0007                     	;# 
    23  0008                     	;# 
    24  0009                     	;# 
    25  000A                     	;# 
    26  000B                     	;# 
    27  000C                     	;# 
    28  000D                     	;# 
    29  000E                     	;# 
    30  000E                     	;# 
    31  000F                     	;# 
    32  0010                     	;# 
    33  0011                     	;# 
    34  0012                     	;# 
    35  0013                     	;# 
    36  0014                     	;# 
    37  0015                     	;# 
    38  0015                     	;# 
    39  0016                     	;# 
    40  0017                     	;# 
    41  0018                     	;# 
    42  0019                     	;# 
    43  001A                     	;# 
    44  001B                     	;# 
    45  001B                     	;# 
    46  001C                     	;# 
    47  001D                     	;# 
    48  001E                     	;# 
    49  001F                     	;# 
    50  0081                     	;# 
    51  0085                     	;# 
    52  0086                     	;# 
    53  0087                     	;# 
    54  0088                     	;# 
    55  0089                     	;# 
    56  008C                     	;# 
    57  008D                     	;# 
    58  008E                     	;# 
    59  0091                     	;# 
    60  0092                     	;# 
    61  0093                     	;# 
    62  0094                     	;# 
    63  0098                     	;# 
    64  0099                     	;# 
    65  009C                     	;# 
    66  009D                     	;# 
    67  009E                     	;# 
    68  009F                     	;# 
    69  010C                     	;# 
    70  010D                     	;# 
    71  010E                     	;# 
    72  010F                     	;# 
    73  018C                     	;# 
    74  018D                     	;# 
    75  0006                     _PORTB	set	6
    76  0007                     _PORTC	set	7
    77  005F                     _GIE	set	95
    78  005C                     _INTE	set	92
    79  0059                     _INTF	set	89
    80  005D                     _TMR0IE	set	93
    81  005A                     _TMR0IF	set	90
    82  0081                     _OPTION_REG	set	129
    83  0086                     _TRISB	set	134
    84  0087                     _TRISC	set	135
    85                           
    86                           	psect	text0
    87  0000                     __ptext0:	
    88                           ; #config settings
    89                           
    90                           
    91                           ;psect for function _ISR
    92  0000                     
    93                           	psect	cinit
    94  0015                     start_initialization:	
    95  0015                     __initialization:	
    96                           
    97                           ; Clear objects allocated to BITCOMMON
    98  0015  01F7               	clrf	(__pbitbssCOMMON/(0+8))& (0+127)
    99                           
   100                           ; Clear objects allocated to COMMON
   101  0016  01F8               	clrf	__pbssCOMMON& (0+127)
   102  0017                     end_of_initialization:	
   103                           ;End of C runtime variable initialization code
   104                           
   105  0017                     __end_of__initialization:	
   106  0017  0183               	clrf	3
   107  0018  120A  118A  2888   	ljmp	_main	;jump to C main() function
   108                           
   109                           	psect	bitbssCOMMON
   110  03B8                     __pbitbssCOMMON:	
   111  03B8                     _myINTF:	
   112  03B8                     	ds	1
   113  03B9                     _myTMR0IF:	
   114  03B9                     	ds	1
   115                           
   116                           	psect	bssCOMMON
   117  0078                     __pbssCOMMON:	
   118  0078                     _counter:	
   119  0078                     	ds	1
   120                           
   121                           	psect	cstackCOMMON
   122  0070                     __pcstackCOMMON:	
   123  0070                     ?_ISR:	
   124  0070                     ??_ISR:	
   125                           ; 0 bytes @ 0x0
   126                           
   127  0070                     ?_main:	
   128                           ; 0 bytes @ 0x0
   129                           
   130                           
   131                           ; 0 bytes @ 0x0
   132  0070                     	ds	5
   133  0075                     ?_delay:	
   134  0075                     delay@count:	
   135                           ; 0 bytes @ 0x5
   136                           
   137                           
   138                           ; 2 bytes @ 0x5
   139  0075                     	ds	2
   140                           
   141                           	psect	cstackBANK0
   142  0020                     __pcstackBANK0:	
   143  0020                     ??_delay:	
   144                           
   145                           ; 0 bytes @ 0x0
   146  0020                     	ds	1
   147  0021                     delay@of_count:	
   148                           
   149                           ; 2 bytes @ 0x1
   150  0021                     	ds	2
   151  0023                     ??_main:	
   152                           
   153                           ; 0 bytes @ 0x3
   154  0023                     	ds	1
   155                           
   156                           	psect	maintext
   157  0088                     __pmaintext:	
   158 ;;
   159 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
   160 ;;
   161 ;; *************** function _main *****************
   162 ;; Defined at:
   163 ;;		line 100 in file "C:\Users\ivorr\OneDrive\Documents\abEMBEDDED\PA3\PA3\LE3-3\LE3-3.c"
   164 ;; Parameters:    Size  Location     Type
   165 ;;		None
   166 ;; Auto vars:     Size  Location     Type
   167 ;;		None
   168 ;; Return value:  Size  Location     Type
   169 ;;		None               void
   170 ;; Registers used:
   171 ;;		wreg, status,2, status,0, pclath, cstack
   172 ;; Tracked objects:
   173 ;;		On entry : 17F/0
   174 ;;		On exit  : 0/0
   175 ;;		Unchanged: 0/0
   176 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   177 ;;      Params:         0       0       0       0       0
   178 ;;      Locals:         0       0       0       0       0
   179 ;;      Temps:          0       1       0       0       0
   180 ;;      Totals:         0       1       0       0       0
   181 ;;Total ram usage:        1 bytes
   182 ;; Hardware stack levels required when called:    2
   183 ;; This function calls:
   184 ;;		_delay
   185 ;; This function is called by:
   186 ;;		Startup code after reset
   187 ;; This function uses a non-reentrant model
   188 ;;
   189                           
   190                           
   191                           ;psect for function _main
   192  0088                     _main:	
   193                           
   194                           ;LE3-3.c: 103: TRISB = 0xFF;
   195                           
   196                           ;incstack = 0
   197                           ; Regs used in _main: [wreg+status,2+status,0+pclath+cstack]
   198  0088  30FF               	movlw	255
   199  0089  1683               	bsf	3,5	;RP0=1, select bank1
   200  008A  1303               	bcf	3,6	;RP1=0, select bank1
   201  008B  0086               	movwf	6	;volatile
   202                           
   203                           ;LE3-3.c: 104: TRISC = 0x00;
   204  008C  0187               	clrf	7	;volatile
   205                           
   206                           ;LE3-3.c: 106: OPTION_REG = 0xC3;
   207  008D  30C3               	movlw	195
   208  008E  0081               	movwf	1	;volatile
   209                           
   210                           ;LE3-3.c: 108: INTF = 0;
   211  008F  108B               	bcf	11,1	;volatile
   212                           
   213                           ;LE3-3.c: 109: INTE = 1;
   214  0090  160B               	bsf	11,4	;volatile
   215                           
   216                           ;LE3-3.c: 111: TMR0IF = 0;
   217  0091  110B               	bcf	11,2	;volatile
   218                           
   219                           ;LE3-3.c: 112: TMR0IE = 1;
   220  0092  168B               	bsf	11,5	;volatile
   221                           
   222                           ;LE3-3.c: 114: GIE = 1;
   223  0093  178B               	bsf	11,7	;volatile
   224                           
   225                           ;LE3-3.c: 117: PORTC = 0x00;
   226  0094  1283               	bcf	3,5	;RP0=0, select bank0
   227  0095  1303               	bcf	3,6	;RP1=0, select bank0
   228  0096  0187               	clrf	7	;volatile
   229  0097                     l632:	
   230                           ;LE3-3.c: 118: while (1)
   231                           
   232                           
   233                           ;LE3-3.c: 119: {
   234                           ;LE3-3.c: 120: if (myINTF == 0)
   235  0097  1877               	btfsc	_myINTF/(0+8),_myINTF& (0+7)
   236  0098  28A1               	goto	l640
   237                           
   238                           ;LE3-3.c: 121: {
   239                           ;LE3-3.c: 122: counter++;
   240  0099  3001               	movlw	1
   241  009A  00A3               	movwf	??_main
   242  009B  0823               	movf	??_main,w
   243  009C  07F8               	addwf	_counter,f
   244                           
   245                           ;LE3-3.c: 124: if (counter == 0x0A)
   246  009D  0878               	movf	_counter,w
   247  009E  3A0A               	xorlw	10
   248  009F  1903               	btfsc	3,2
   249                           
   250                           ;LE3-3.c: 125: {
   251                           ;LE3-3.c: 126: counter = 0x00;
   252  00A0  01F8               	clrf	_counter
   253  00A1                     l640:	
   254                           ;LE3-3.c: 143: else
   255                           ;LE3-3.c: 144: {
   256                           
   257                           ;LE3-3.c: 127: }
   258                           ;LE3-3.c: 132: }
   259                           
   260                           
   261                           ;LE3-3.c: 146: }
   262                           ;LE3-3.c: 147: delay(195);
   263  00A1  30C3               	movlw	195
   264  00A2  00F5               	movwf	delay@count
   265  00A3  3000               	movlw	0
   266  00A4  00F6               	movwf	delay@count+1
   267  00A5  120A  118A  20AF  120A  118A  	fcall	_delay
   268                           
   269                           ;LE3-3.c: 148: PORTC = counter;
   270  00AA  0878               	movf	_counter,w
   271  00AB  1283               	bcf	3,5	;RP0=0, select bank0
   272  00AC  1303               	bcf	3,6	;RP1=0, select bank0
   273  00AD  0087               	movwf	7	;volatile
   274  00AE  2897               	goto	l632
   275  00AF                     __end_of_main:	
   276                           
   277                           	psect	text1
   278  00AF                     __ptext1:	
   279 ;; *************** function _delay *****************
   280 ;; Defined at:
   281 ;;		line 86 in file "C:\Users\ivorr\OneDrive\Documents\abEMBEDDED\PA3\PA3\LE3-3\LE3-3.c"
   282 ;; Parameters:    Size  Location     Type
   283 ;;  count           2    5[COMMON] int 
   284 ;; Auto vars:     Size  Location     Type
   285 ;;  of_count        2    1[BANK0 ] int 
   286 ;; Return value:  Size  Location     Type
   287 ;;		None               void
   288 ;; Registers used:
   289 ;;		wreg, status,2
   290 ;; Tracked objects:
   291 ;;		On entry : 0/0
   292 ;;		On exit  : 0/0
   293 ;;		Unchanged: 0/0
   294 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   295 ;;      Params:         2       0       0       0       0
   296 ;;      Locals:         0       2       0       0       0
   297 ;;      Temps:          0       1       0       0       0
   298 ;;      Totals:         2       3       0       0       0
   299 ;;Total ram usage:        5 bytes
   300 ;; Hardware stack levels used:    1
   301 ;; Hardware stack levels required when called:    1
   302 ;; This function calls:
   303 ;;		Nothing
   304 ;; This function is called by:
   305 ;;		_main
   306 ;; This function uses a non-reentrant model
   307 ;;
   308                           
   309                           
   310                           ;psect for function _delay
   311  00AF                     _delay:	
   312                           
   313                           ;LE3-3.c: 88: int of_count = 0;
   314                           
   315                           ;incstack = 0
   316                           ; Regs used in _delay: [wreg+status,2]
   317  00AF  1283               	bcf	3,5	;RP0=0, select bank0
   318  00B0  1303               	bcf	3,6	;RP1=0, select bank0
   319  00B1  01A1               	clrf	delay@of_count
   320  00B2  01A2               	clrf	delay@of_count+1
   321  00B3                     l44:	
   322                           ;LE3-3.c: 90: while (of_count < count)
   323                           
   324  00B3  1283               	bcf	3,5	;RP0=0, select bank0
   325  00B4  1303               	bcf	3,6	;RP1=0, select bank0
   326  00B5  0822               	movf	delay@of_count+1,w
   327  00B6  3A80               	xorlw	128
   328  00B7  00A0               	movwf	??_delay
   329  00B8  0876               	movf	delay@count+1,w
   330  00B9  3A80               	xorlw	128
   331  00BA  0220               	subwf	??_delay,w
   332  00BB  1D03               	skipz
   333  00BC  28BF               	goto	u215
   334  00BD  0875               	movf	delay@count,w
   335  00BE  0221               	subwf	delay@of_count,w
   336  00BF                     u215:	
   337  00BF  1803               	btfsc	3,0
   338  00C0  0008               	return
   339                           
   340                           ;LE3-3.c: 91: {
   341                           ;LE3-3.c: 92: if(myTMR0IF == 1)
   342  00C1  1CF7               	btfss	_myTMR0IF/(0+8),_myTMR0IF& (0+7)
   343  00C2  28B3               	goto	l44
   344                           
   345                           ;LE3-3.c: 93: {
   346                           ;LE3-3.c: 94: of_count++;
   347  00C3  3001               	movlw	1
   348  00C4  1283               	bcf	3,5	;RP0=0, select bank0
   349  00C5  1303               	bcf	3,6	;RP1=0, select bank0
   350  00C6  07A1               	addwf	delay@of_count,f
   351  00C7  1803               	skipnc
   352  00C8  0AA2               	incf	delay@of_count+1,f
   353  00C9  3000               	movlw	0
   354  00CA  07A2               	addwf	delay@of_count+1,f
   355                           
   356                           ;LE3-3.c: 95: myTMR0IF = 0;
   357  00CB  10F7               	bcf	_myTMR0IF/(0+8),_myTMR0IF& (0+7)
   358  00CC  28B3               	goto	l44
   359  00CD                     __end_of_delay:	
   360                           
   361                           	psect	text2
   362  001B                     __ptext2:	
   363 ;; *************** function _ISR *****************
   364 ;; Defined at:
   365 ;;		line 16 in file "C:\Users\ivorr\OneDrive\Documents\abEMBEDDED\PA3\PA3\LE3-3\LE3-3.c"
   366 ;; Parameters:    Size  Location     Type
   367 ;;		None
   368 ;; Auto vars:     Size  Location     Type
   369 ;;		None
   370 ;; Return value:  Size  Location     Type
   371 ;;		None               void
   372 ;; Registers used:
   373 ;;		wreg
   374 ;; Tracked objects:
   375 ;;		On entry : 0/0
   376 ;;		On exit  : 0/0
   377 ;;		Unchanged: 0/0
   378 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   379 ;;      Params:         0       0       0       0       0
   380 ;;      Locals:         0       0       0       0       0
   381 ;;      Temps:          5       0       0       0       0
   382 ;;      Totals:         5       0       0       0       0
   383 ;;Total ram usage:        5 bytes
   384 ;; Hardware stack levels used:    1
   385 ;; This function calls:
   386 ;;		Nothing
   387 ;; This function is called by:
   388 ;;		Interrupt level 1
   389 ;; This function uses a non-reentrant model
   390 ;;
   391                           
   392                           
   393                           ;psect for function _ISR
   394  001B                     _ISR:	
   395                           
   396                           ;LE3-3.c: 18: GIE = 0;
   397  001B  138B               	bcf	11,7	;volatile
   398                           
   399                           ;LE3-3.c: 20: if(INTF == 1)
   400  001C  1C8B               	btfss	11,1	;volatile
   401  001D  2878               	goto	i1l29
   402                           
   403                           ;LE3-3.c: 21: {
   404                           ;LE3-3.c: 22: INTF = 0;
   405  001E  108B               	bcf	11,1	;volatile
   406                           
   407                           ;LE3-3.c: 25: if (PORTB == 0x01)
   408  001F  0806               	movf	6,w	;volatile
   409  0020  3A01               	xorlw	1
   410  0021  1D03               	skipz
   411  0022  2827               	goto	i1l30
   412                           
   413                           ;LE3-3.c: 26: {
   414                           ;LE3-3.c: 27: PORTC = 0x01;
   415  0023  3001               	movlw	1
   416  0024  0087               	movwf	7	;volatile
   417                           
   418                           ;LE3-3.c: 28: counter = 0x01;
   419  0025  01F8               	clrf	_counter
   420  0026  0AF8               	incf	_counter,f
   421  0027                     i1l30:	
   422                           
   423                           ;LE3-3.c: 30: }
   424                           ;LE3-3.c: 32: if (PORTB == 0x03)
   425  0027  0806               	movf	6,w	;volatile
   426  0028  3A03               	xorlw	3
   427  0029  1D03               	skipz
   428  002A  2831               	goto	i1l31
   429                           
   430                           ;LE3-3.c: 33: {
   431                           ;LE3-3.c: 34: PORTC = 0x02;
   432  002B  3002               	movlw	2
   433  002C  0087               	movwf	7	;volatile
   434                           
   435                           ;LE3-3.c: 35: counter = 0x02;
   436  002D  3002               	movlw	2
   437  002E  00F0               	movwf	??_ISR
   438  002F  0870               	movf	??_ISR,w
   439  0030  00F8               	movwf	_counter
   440  0031                     i1l31:	
   441                           
   442                           ;LE3-3.c: 37: }
   443                           ;LE3-3.c: 39: if (PORTB == 0x07)
   444  0031  0806               	movf	6,w	;volatile
   445  0032  3A07               	xorlw	7
   446  0033  1D03               	skipz
   447  0034  283B               	goto	i1l32
   448                           
   449                           ;LE3-3.c: 40: {
   450                           ;LE3-3.c: 41: PORTC = 0x03;
   451  0035  3003               	movlw	3
   452  0036  0087               	movwf	7	;volatile
   453                           
   454                           ;LE3-3.c: 42: counter = 0x03;
   455  0037  3003               	movlw	3
   456  0038  00F0               	movwf	??_ISR
   457  0039  0870               	movf	??_ISR,w
   458  003A  00F8               	movwf	_counter
   459  003B                     i1l32:	
   460                           
   461                           ;LE3-3.c: 44: }
   462                           ;LE3-3.c: 45: if (PORTB == 0x09)
   463  003B  0806               	movf	6,w	;volatile
   464  003C  3A09               	xorlw	9
   465  003D  1D03               	skipz
   466  003E  2845               	goto	i1l33
   467                           
   468                           ;LE3-3.c: 46: {
   469                           ;LE3-3.c: 47: PORTC = 0x04;
   470  003F  3004               	movlw	4
   471  0040  0087               	movwf	7	;volatile
   472                           
   473                           ;LE3-3.c: 48: counter = 0x04;
   474  0041  3004               	movlw	4
   475  0042  00F0               	movwf	??_ISR
   476  0043  0870               	movf	??_ISR,w
   477  0044  00F8               	movwf	_counter
   478  0045                     i1l33:	
   479                           
   480                           ;LE3-3.c: 49: }
   481                           ;LE3-3.c: 50: if (PORTB == 0x0B)
   482  0045  0806               	movf	6,w	;volatile
   483  0046  3A0B               	xorlw	11
   484  0047  1D03               	skipz
   485  0048  284F               	goto	i1l34
   486                           
   487                           ;LE3-3.c: 51: {
   488                           ;LE3-3.c: 52: PORTC = 0x05;
   489  0049  3005               	movlw	5
   490  004A  0087               	movwf	7	;volatile
   491                           
   492                           ;LE3-3.c: 53: counter = 0x05;
   493  004B  3005               	movlw	5
   494  004C  00F0               	movwf	??_ISR
   495  004D  0870               	movf	??_ISR,w
   496  004E  00F8               	movwf	_counter
   497  004F                     i1l34:	
   498                           
   499                           ;LE3-3.c: 54: }
   500                           ;LE3-3.c: 55: if (PORTB == 0x0F)
   501  004F  0806               	movf	6,w	;volatile
   502  0050  3A0F               	xorlw	15
   503  0051  1D03               	skipz
   504  0052  2859               	goto	i1l35
   505                           
   506                           ;LE3-3.c: 56: {
   507                           ;LE3-3.c: 57: PORTC = 0x06;
   508  0053  3006               	movlw	6
   509  0054  0087               	movwf	7	;volatile
   510                           
   511                           ;LE3-3.c: 58: counter = 0x06;
   512  0055  3006               	movlw	6
   513  0056  00F0               	movwf	??_ISR
   514  0057  0870               	movf	??_ISR,w
   515  0058  00F8               	movwf	_counter
   516  0059                     i1l35:	
   517                           
   518                           ;LE3-3.c: 59: }
   519                           ;LE3-3.c: 60: if (PORTB == 0x11)
   520  0059  0806               	movf	6,w	;volatile
   521  005A  3A11               	xorlw	17
   522  005B  1D03               	skipz
   523  005C  2863               	goto	i1l36
   524                           
   525                           ;LE3-3.c: 61: {
   526                           ;LE3-3.c: 62: PORTC = 0x07;
   527  005D  3007               	movlw	7
   528  005E  0087               	movwf	7	;volatile
   529                           
   530                           ;LE3-3.c: 63: counter = 0x07;
   531  005F  3007               	movlw	7
   532  0060  00F0               	movwf	??_ISR
   533  0061  0870               	movf	??_ISR,w
   534  0062  00F8               	movwf	_counter
   535  0063                     i1l36:	
   536                           
   537                           ;LE3-3.c: 64: }
   538                           ;LE3-3.c: 65: if (PORTB == 0x13)
   539  0063  0806               	movf	6,w	;volatile
   540  0064  3A13               	xorlw	19
   541  0065  1D03               	skipz
   542  0066  286D               	goto	i1l37
   543                           
   544                           ;LE3-3.c: 66: {
   545                           ;LE3-3.c: 67: PORTC = 0x08;
   546  0067  3008               	movlw	8
   547  0068  0087               	movwf	7	;volatile
   548                           
   549                           ;LE3-3.c: 68: counter = 0x08;
   550  0069  3008               	movlw	8
   551  006A  00F0               	movwf	??_ISR
   552  006B  0870               	movf	??_ISR,w
   553  006C  00F8               	movwf	_counter
   554  006D                     i1l37:	
   555                           
   556                           ;LE3-3.c: 69: }
   557                           ;LE3-3.c: 70: if (PORTB == 0x17)
   558  006D  0806               	movf	6,w	;volatile
   559  006E  3A17               	xorlw	23
   560  006F  1D03               	skipz
   561  0070  287C               	goto	i1l39
   562                           
   563                           ;LE3-3.c: 71: {
   564                           ;LE3-3.c: 72: PORTC = 0x09;
   565  0071  3009               	movlw	9
   566  0072  0087               	movwf	7	;volatile
   567                           
   568                           ;LE3-3.c: 73: counter = 0x09;
   569  0073  3009               	movlw	9
   570  0074  00F0               	movwf	??_ISR
   571  0075  0870               	movf	??_ISR,w
   572  0076  00F8               	movwf	_counter
   573                           
   574                           ;LE3-3.c: 74: }
   575                           ;LE3-3.c: 75: }
   576  0077  287C               	goto	i1l39
   577  0078                     i1l29:	
   578                           
   579                           ;LE3-3.c: 78: else if(TMR0IF == 1)
   580  0078  1D0B               	btfss	11,2	;volatile
   581  0079  287C               	goto	i1l39
   582                           
   583                           ;LE3-3.c: 79: {
   584                           ;LE3-3.c: 80: TMR0IF = 0;
   585  007A  110B               	bcf	11,2	;volatile
   586                           
   587                           ;LE3-3.c: 81: myTMR0IF = 1;
   588  007B  14F7               	bsf	_myTMR0IF/(0+8),_myTMR0IF& (0+7)
   589  007C                     i1l39:	
   590                           
   591                           ;LE3-3.c: 82: }
   592                           ;LE3-3.c: 83: GIE = 1;
   593  007C  178B               	bsf	11,7	;volatile
   594  007D  0874               	movf	??_ISR+4,w
   595  007E  00FF               	movwf	127
   596  007F  0873               	movf	??_ISR+3,w
   597  0080  008A               	movwf	10
   598  0081  0872               	movf	??_ISR+2,w
   599  0082  0084               	movwf	4
   600  0083  0E71               	swapf	(??_ISR+1)^(0+-128),w
   601  0084  0083               	movwf	3
   602  0085  0EFE               	swapf	126,f
   603  0086  0E7E               	swapf	126,w
   604  0087  0009               	retfie
   605  0088                     __end_of_ISR:	
   606  007E                     btemp	set	126	;btemp
   607  007E                     wtemp	set	126
   608  007E                     wtemp0	set	126
   609  0080                     wtemp1	set	128
   610  0082                     wtemp2	set	130
   611  0084                     wtemp3	set	132
   612  0086                     wtemp4	set	134
   613  0088                     wtemp5	set	136
   614  007F                     wtemp6	set	127
   615  007E                     ttemp	set	126
   616  007E                     ttemp0	set	126
   617  0081                     ttemp1	set	129
   618  0084                     ttemp2	set	132
   619  0087                     ttemp3	set	135
   620  007F                     ttemp4	set	127
   621  007E                     ltemp	set	126
   622  007E                     ltemp0	set	126
   623  0082                     ltemp1	set	130
   624  0086                     ltemp2	set	134
   625  0080                     ltemp3	set	128
   626                           
   627                           	psect	intentry
   628  0004                     __pintentry:	
   629                           ;incstack = 0
   630                           ; Regs used in _ISR: [wreg]
   631                           
   632  0004                     interrupt_function:	
   633  007E                     saved_w	set	btemp
   634  0004  00FE               	movwf	btemp
   635  0005  0E03               	swapf	3,w
   636  0006  00F1               	movwf	??_ISR+1
   637  0007  0804               	movf	4,w
   638  0008  00F2               	movwf	??_ISR+2
   639  0009  080A               	movf	10,w
   640  000A  00F3               	movwf	??_ISR+3
   641  000B  1283               	bcf	3,5	;RP0=0, select bank0
   642  000C  1303               	bcf	3,6	;RP1=0, select bank0
   643  000D  087F               	movf	btemp+1,w
   644  000E  00F4               	movwf	??_ISR+4
   645  000F  120A  118A  281B   	ljmp	_ISR


Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         1
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      7       9
    BANK0            80      4       4
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    _main->_delay

Critical Paths under _ISR in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_delay

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 1     1      0     133
                                              3 BANK0      1     1      0
                              _delay
 ---------------------------------------------------------------------------------
 (1) _delay                                                5     3      2     133
                                              5 COMMON     2     0      2
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 1
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (2) _ISR                                                  5     5      0       0
                                              0 COMMON     5     5      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _delay

 _ISR (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       1       0        7.1%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      7       9       1       64.3%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0       D       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50      4       4       5        5.0%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITBANK3            60      0       0       8        0.0%
BANK3               60      0       0       9        0.0%
BITBANK2            60      0       0      10        0.0%
BANK2               60      0       0      11        0.0%
DATA                 0      0       D      12        0.0%


Microchip Technology PIC Macro Assembler V1.33 build 59893 
Symbol Table                                                                                   Wed Feb 19 21:56:59 2025

            __CFG_CP$OFF 0000                       l44 00B3                      l640 00A1  
                    l632 0097                      _GIE 005F                      u215 00BF  
           __CFG_CPD$OFF 0000                      _ISR 001B                      fsr0 0004  
           __CFG_FOSC$XT 0000             __CFG_LVP$OFF 0000                     ?_ISR 0070  
                   _INTE 005C                     i1l30 0027                     _INTF 0059  
                   i1l31 0031                     i1l32 003B                     i1l33 0045  
                   i1l34 004F                     i1l35 0059                     i1l36 0063  
                   i1l37 006D                     i1l29 0078                     i1l39 007C  
           __CFG_WRT$OFF 0000                     _main 0088                     btemp 007E  
          __CFG_BOREN$ON 0000                     ltemp 007E                     start 0012  
                   ttemp 007E                     wtemp 007E                    ??_ISR 0070  
                  ?_main 0070            __CFG_WDTE$OFF 0000                    _PORTB 0006  
                  _PORTC 0007                    _TRISB 0086                    _TRISC 0087  
          __CFG_PWRTE$ON 0000                    _delay 00AF           __pbitbssCOMMON 03B8  
                  pclath 000A                    ltemp0 007E                    ltemp1 0082  
                  ltemp2 0086                    ltemp3 0080                    ttemp0 007E  
                  ttemp1 0081                    ttemp2 0084                    ttemp3 0087  
                  ttemp4 007F                    status 0003                    wtemp0 007E  
                  wtemp1 0080                    wtemp2 0082                    wtemp3 0084  
                  wtemp4 0086                    wtemp5 0088                    wtemp6 007F  
        __initialization 0015             __end_of_main 00AF                   ??_main 0023  
                 ?_delay 0075                   _TMR0IE 005D                   _TMR0IF 005A  
                 _myINTF 03B8                   saved_w 007E  __end_of__initialization 0017  
         __pcstackCOMMON 0070            __end_of_delay 00CD                  ??_delay 0020  
             __pmaintext 0088               __pintentry 0004                  __ptext0 0000  
                __ptext1 00AF                  __ptext2 001B            delay@of_count 0021  
           __size_of_ISR 006D                  _counter 0078               delay@count 0075  
   end_of_initialization 0017      start_initialization 0015              __end_of_ISR 0088  
            __pbssCOMMON 0078                ___latbits 0002            __pcstackBANK0 0020  
         __size_of_delay 001E        interrupt_function 0004                 _myTMR0IF 03B9  
          __size_of_main 0027                 intlevel1 0000               _OPTION_REG 0081  
